from sklearn.metrics import roc_curve

preds = runLGB(train_X, train_y, train_X, seed=0)
def Find_Optimal_Cutoff(target, predicted):
    """ Find the optimal probability cutoff point for a classification model related to event rate
    Parameters
    ----------
    target : Matrix with dependent or target data, where rows are observations
    predicted : Matrix with predicted data, where rows are observations
    Returns
    -------     
    list type, with optimal cutoff value
    """
    fpr, tpr, threshold = roc_curve(target, predicted)
    i = np.arange(len(tpr)) 
    roc = pd.DataFrame({'tf' : pd.Series(tpr-(1-fpr), index=i), 'threshold' : pd.Series(threshold, index=i)})
    roc_t = roc.ix[(roc.tf-0).abs().argsort()[:1]]
    return list(roc_t['threshold']) 

k=Find_Optimal_Cutoff(train_y, preds)


condlist = [
   sub_df["Loan_Status"] >= 0.6888251435528968,
   sub_df["Loan_Status"] < 0.6888251435528968
]
choicelist = ['Y', 'N']
sub_df["Loan_Status"] = np.select(
   condlist, choicelist, default='Y')

sub_df[sub_df["Loan_Status"]=='Y'].count()
sub_df.to_csv("data/result_lgb.csv", index=False)

from tpot import TPOTClassifier
tpot = TPOTClassifier(generations=5, verbosity=2)
tpot.fit(train_X, train_y)
tpot.fit(X_train, y_train)
print(tpot.score(train_X, train_y))
tpot.export('tpot_automl_pipeline.py')
